---
- name: Install Openshift python module
  pip:
    name: openshift
    executable: /usr/bin/pip3

- name: Get user information
  command: "getent passwd {{ ansible_facts['env']['SUDO_UID'] | default(0) }}"
  changed_when: false
  failed_when: false
  register: _user_info

- name: Check if installation is already done
  stat:
    path: "/etc/kubernetes/pki/ca.key"
  register: kubeadm_ca_key

- name: Get or generate kubernetes bootstrap token
  include_tasks: bootstrap_token.yml

- name: Init cluster if needed
  include_tasks: init.yml
  when: not kubeadm_ca_key.stat.exists
  run_once: yes

- name: Get discovery-token-ca-cert-hash
  shell: openssl x509 -pubkey -in /etc/kubernetes/pki/ca.crt | openssl rsa -pubin -outform der 2>/dev/null | openssl dgst -sha256 -hex | sed 's/^.* //'
  register: _discovery_token_ca_cert_hash_content

- name: Set discovery token ca cert hash fact
  set_fact:
    discovery_token_ca_cert_hash: "{{ _discovery_token_ca_cert_hash_content.stdout }}"
  delegate_facts: True

- name: Create Kubernetes config directory for the root user
  file:
    path: "/root/.kube/"
    state: directory

- name: Copy admin.conf to /root directory
  copy:
    src: "{{ kubeadmin_config }}"
    dest: "/root/.kube/config"
    owner: root
    group: root
    mode: 0600
    remote_src: true

- name: Copy kube config to control host
  fetch:
    src: /root/.kube/config
    dest: "{{ _user_info.stdout.split(':')[5] | default('/root') }}/.kube/config"
    owner: "{{ ansible_facts['env']['SUDO_UID'] | default(0) }}"
    group: "{{ ansible_facts['env']['SUDO_GID'] | default(0) }}"
    flat: yes
  when: kubectl_on_control_host == true

- name: Download and extract Helm
  unarchive:
    src: "https://get.helm.sh/helm-{{ helm_version }}-linux-amd64.tar.gz"
    dest: /usr/local/bin
    extra_opts:
      - --strip=1
      - --wildcards
      - '*/helm'
    remote_src: True
  tags:
    - helm
    - master

- name: Install networking
  include_tasks: network_plugin/main.yml
  tags:
    - master
    - network
    - cilium
    - calico

###
# Begin: Apps
###
- name: Install MetalLB as LoadBalancer
  include_tasks: apps/metallb.yml
  tags:
    - metallb
  when: install_metallb

- name: Install Traefik as Ingress Controller
  include_tasks: apps/traefik.yml
  tags:
    - traefik
  when: install_traefik

###
# End: Apps
###

- name: Configure an IngressRoute for the Hubble ui
  community.kubernetes.k8s:
    state: present
    definition:
      apiVersion: traefik.containo.us/v1alpha1
      kind: IngressRoute
      metadata:
        name: hubble-ui-ingress
        namespace: kube-system
      spec:
        entryPoints:
          - web
        routes:
          - match: Host(`{{ hubble_ui_ingress_hostname }}`)
            kind: Rule
            services:
              - kind: Service
                name: hubble-ui
                port: 80
  tags:
    - cilium
    - master
  when: (install_hubble | bool)
